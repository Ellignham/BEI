#!/usr/bin/python
"""
TO DO
-changer ordre boucles dans le remplissage du maillage, raffiner les extremites (avec une fonction ?) 
- essayer les coord polaires pour les extremites du maillage
- OXYGENE LIQUIDE
-ajouter fonction de phase
- gaz a psat
- on neglige la convection en 1e approximation

-Implementer les CL sur la resistance thermique + ajouter la resistance par convection
-Creer le bon maillage + adapter x,y,mesh
-Calculer h coeff de convection avec nusselt (ou Gr Pr cf. handbook)
-Calculer nusselt avec corelation adaptee au probleme (Gnielinski ? Dittus-Boelter ?)
-Lire le handbook

-Implementer des noeuds mobiles pour le suivi d'interface
-Implementer la biblioteque d integration (pas encore fournie)
-Implementer le calcul des param thermo en fonction des conditions P,T (params fixes pour le moment)
-Fichier lisibles par paraview

-sortie environ 10cm
"""

#Imports
import numpy as np 
import matplotlib.pyplot as plt
import matplotlib.cm as cm
import math as math


class Nodal:
    def __init__(self):
        """
        mesh : cell centered for temperature, pressure    

        Variables :

        debug       : if true the program will run on debug mode

        fluid       : type of fluid in the tank (used to compute rho, Cp, ...)
        tfluid_init : initial temperature of the fluid [K]
        pfluid_init : initial pressure of the fluid [Pa]
        ufluid_init : initial x velocity of the fluid [m/s]
        vfluid_init : initial y velocity of the fluid [m/s]

        cond        : If true thermal conduction will be computed
        conv        : If true thermal convection will be computed
    
        rho         : density [kg/m^3] (ignored if computed_parameters=True )
        k           : thermal condutivity [W/K/m] (ignored if computed_parameters=True )

        Lx          : size of the domain in the x direction [m]
        Ly          : size of the domain in the y direction [m]
        
        Nptsx       : number of nodes in the x direction
        Nptsy       : number of nodes in the y direction

        T1          : temperature of the walls [K]
        """
        #Debug Mode
        self.debug=True

        #Parameters of the fluid
        self.computed_parameters=False
        self.fluid="liquid_water"
        self.tfluid_init=293
        self.pfluid_init=10**5
        self.ufluid_init=1
        self.vfluid_init=1
        
        #Parameters of the heat transfer
        self.cond=True
        self.conv=True

        #Parameters of the fluid (with thermodynamic parameters locked)
        if not self.computed_parameters :
            self.rho=10**3
            self.k=0.5918

        #Parameters of the mesh
        self.Lx=1.
        self.Ly=10.
        self.Nptsx=10
        self.Nptsy=100

        #Parameters of the problem
        self.T1=313
        
    def init_domain(self):
        """
        Initialise the domain before the computation


        Variables :

        x           : variable containing the x position of the nodes
        y           : variable containing the y position of the nodes
        mesh        : contain the x and y position of the nodes (mesh[:,0] x positions,                      mesh[:,1] y positions)

        temp        : array containing the temperature field [K]
        pres        : array containing the pressure field [Pa]

        U           : array containing the x velocity field [m/s]
        V           : array containing the y velocity field [m/s]

        Rx          : array containing the conduction thermal resistance Rj,i+1/2 [K.m/W]
        Ry          : array containing the conduction thermal resistance Rj+1/2,i [K.m/W]

        """
        
        #Creation of the mesh
        self.x = np.linspace(0,self.Lx/2,self.Nptsx)
        self.y = np.linspace(0,self.Ly/2,self.Nptsy)
        self.mesh = np.array((self.y,self.x))
        
        #Creation of the temperature array
        self.temp = np.zeros((self.Nptsy,self.Nptsx)) 
        self.temp[1:self.Nptsy-1,1:self.Nptsx-1] = self.tfluid_init 
        self.temp[0,:] = self.T1 ; self.temp[self.Nptsy-1,:] = self.T1
        self.temp[:,0] = self.T1 ; self.temp[:,self.Nptsx-1] = self.T1
        
        #Creation of the pressure array
        self.pres = np.zeros((self.Nptsy,self.Nptsx)) 
        self.pres[:,:] = self.pfluid_init 
        
        #Creation of the velocity fields
        self.U = np.zeros((self.Nptsy,self.Nptsx))
        self.V = np.zeros((self.Nptsy,self.Nptsx))
        self.U[:,:]=self.ufluid_init
        self.V[:,:]=self.vfluid_init

        #Creation of thermal resistance arrays
        self.Rx = np.zeros((self.Nptsy,self.Nptsx+1))
        self.Ry = np.zeros((self.Nptsy+1,self.Nptsx))
    
    def domain(self):
        """
        Creates the shape of the tank and fills it with nodes
        """

        #Create the boudary of the tank
        self.boundary=np.zeros((self.Nptsy,2))

        for j in range(0,self.Nptsy):
            self.boundary[j,0]=self.y[j]
            if (self.y[j]<self.Lx/2):
                self.boundary[j,1]=self.Lx/2-math.sqrt((self.Lx/2)**2-(self.y[j]-self.Lx/2)**2)
            elif (self.y[j]>self.Ly-self.Lx/2):
                self.boundary[j,1]=self.Lx/2-math.sqrt(abs((self.Lx/2)**2-(self.y[j]-self.Ly+self.Lx/2)**2))
            else :
                self.boundary[j,1]=0

        #Fill the tank with nodes
        self.xnodes=np.zeros((self.Nptsy,self.Nptsx))
        self.ynodes=np.zeros((self.Nptsy,self.Nptsx))

        for i in range(0,self.Nptsx):
            for j in range(0,self.Nptsy):
                if (self.y[j]<self.Lx/2):# and self.y[j]>math.sqrt(abs((self.Lx/2-self.x[i]/2)**2-(self.y[j]-self.Lx/2)**2))-self.Lx/2 ) :
                    self.ynodes[j,i]=self.y[j]
                    self.xnodes[j,i]=self.x[i]
                elif (self.y[j]<self.Ly-self.Lx/2 and self.y[j]>self.Lx/2):
                    self.ynodes[j,i]=self.y[j]
                    self.xnodes[j,i]=self.x[i]
                elif (self.y[j]>self.Ly+self.Lx/2): 
                    self.ynodes[j,i]=self.y[j]
                    self.xnodes[j,i]=self.x[i]#self.Lx/2-math.sqrt(abs((self.Lx/2-self.x[i]/2)**2-(self.y[j]-self.Ly+self.Lx/2)**2))


        
        plt.figure()
        plt.plot(self.boundary[:,1],self.boundary[:,0],'or')
        plt.xlim(-0.5,1.5)
        plt.ylim(-1,1)
        plt.plot(self.xnodes,self.ynodes,'o')
      #  plt.ylim(8,10.5)
      #  plt.xlim(0.5,1.4)
        plt.show()

    def resistance(self):
        if self.cond :
            for j in range(1,self.Nptsy-1):
                for i in range(1,self.Nptsx):      
                    self.Rx[j,i]=self.Rx[j,i] + (self.x[i]-self.x[i-1])/(self.k*(self.y[j+1]-self.y[j-1])/2)
            for i in range(1,self.Nptsx):
                self.Rx[0,i]=self.Rx[0,i] + (self.x[i]-self.x[i-1])/(self.k*(self.y[1]-self.y[0]))
                self.Rx[self.Nptsy-1,i]=self.Rx[self.Nptsy-1,i] + (self.x[i]-self.x[i-1])/(self.k*(self.y[self.Nptsy-1]-self.y[self.Nptsy-2]))
 
            for j in range(1,self.Nptsy):
                for i in range(1,self.Nptsx-1):      
                    self.Ry[j,i]=self.Ry[j,i] + (self.y[j]-self.y[j-1])/(self.k*(self.x[i+1]-self.x[i-1])/2)
            for j in range(1,self.Nptsy):
                self.Ry[j,0]=self.Ry[j,0] + (self.y[j]-self.y[j-1])/(self.k*(self.x[1]-self.x[0]))
                self.Ry[j,self.Nptsx-1]=self.Ry[j,self.Nptsx-1] + (self.y[j]-self.y[j-1])/(self.k*(self.x[self.Nptsx-1]-self.x[self.Nptsx-2]))
        
        if self.conv :
            print()
        #Creation on thermal capacity array
 

    def update_parameters(self):
        """
        Computes the thermodynamic parameters of the fluid using correlations
        """


class Visu(Nodal):
    def __init__(self):
        """
        Class used to plot and write to files the different arrays
        """
        
        Nodal.__init__(self)

    def plot_temp(self):
        """ 
        Plots a surface view of the temperature
        """
        plt.figure() 
        plt.imshow(self.temp.reshape((self.Nptsy,self.Nptsx)),extent=(self.x.min(), self.x.max(), self.y.max(), self.y.min()), interpolation='nearest',cmap=cm.gist_rainbow)
        plt.colorbar()
        plt.xlabel('x')
        plt.ylabel('y')
        plt.title('Temperature')

    def write_temp(self):
        """
        Writes the temperature array to a file
        """
        file=open("temp.txt",'w+') 

        for j in range(0,self.Nptsy):
            for i in range(0,self.Nptsx):
                file.write(str(self.temp[j,i]) + ' ')
            file.write('\n')
        file.close()

    def plot_pres(self):
        """ 
        Plots a surface view of the pressure
        """
        plt.figure()
        plt.imshow(self.pres.reshape((self.Nptsy,self.Nptsx)),extent=(self.x.min(), self.x.max(), self.y.max(), self.y.min()), interpolation='nearest',cmap=cm.gist_rainbow)
        plt.colorbar()
        plt.xlabel('x')
        plt.ylabel('y')
        plt.title('Pressure')

    def write_pres(self):
        """
        Writes the pressure array to a file
        """
        file=open("press.txt",'w+') 

        for j in range(0,self.Nptsy):
            for i in range(0,self.Nptsx):
                file.write(str(self.pres[j,i]) + ' ')
            file.write('\n')
        file.close()

    def write_debug(self):
        """ 
        Write a file containing most varibles and constants to help debuging
        """

        file=open("debug.txt",'w+')
        file.write("---------------------------------------------------------" + "\n")
        file.write("| File containing most variables to help debuging" + "\n")
        file.write("---------------------------------------------------------" + "\n")
        file.write("\n")
        file.write("||  USER SET VARIBLES ||" + "\n")
        file.write("computed_parameters : " + str(self.computed_parameters) + "\n")
        file.write("fluid : " + str(self.fluid) + "\n")
        file.write("tfluid : " + str(self.tfluid_init) + "\n")
        file.write("pfluid : " + str(self.pfluid_init) + "\n")
        if not self.computed_parameters :
            file.write("rho : " + str(self.rho) + "\n")
        else :
            file.write("rho : IGNORED" + "\n")
        file.write("Lx : " + str(self.Lx) + "\n")
        file.write("Ly : " + str(self.Ly) + "\n")
        file.write("Nptsx : " + str(self.Nptsx) + "\n")
        file.write("Nptsy : " + str(self.Nptsy) + "\n")
        file.write("T1 : " + str(self.T1) + "\n")
        file.write("\n")
        
        file.write("||  COMPUTED VARIBLES ||" + "\n")
        file.write("\n")

        file.write("||  COMPUTED ARRAYS  ||" + "\n")
        
        file.write("x array" + "\n")
        for i in range(0,self.Nptsx):
            file.write(str(self.x[i]) + " ")
        file.write("\n")
        file.write("\n")
        
        file.write("y array" + "\n")
        for j in range(0,self.Nptsy):
            file.write(str(self.y[j]) + " ")
        file.write("\n")
        file.write("\n") 

        file.write("mesh array" + "\n")
        for j in range(0,self.Nptsy):
            file.write(str(self.mesh[0][j]) + " " )
        file.write("\n")
        for i in range(0,self.Nptsx):
            file.write(str(self.mesh[1][i]) + " " )
        file.write("\n")
        file.write("\n")
 
        file.write("temperature array" + "\n")
        for j in range(0,self.Nptsy):
            for i in range(0,self.Nptsx):
                file.write(str(self.temp[j,i]) + ' ')
            file.write('\n')
        file.write("\n")
 
        file.write("Pressure array" + "\n")
        for j in range(0,self.Nptsy):
            for i in range(0,self.Nptsx):
                file.write(str(self.pres[j,i]) + ' ')
            file.write('\n')
        file.write("\n")
        
        file.write("Velocity x array" + "\n")
        for j in range(0,self.Nptsy):
            for i in range(0,self.Nptsx):
                file.write(str(self.U[j,i]) + ' ')
            file.write('\n')
        file.write("\n")
        
        file.write("Velocity y array" + "\n")
        for j in range(0,self.Nptsy):
            for i in range(0,self.Nptsx):
                file.write(str(self.V[j,i]) + ' ')
            file.write('\n')
        file.write("\n")

        file.write("Thermal resistance x" + "\n")
        for j in range(0,self.Nptsy):
            for i in range(0,self.Nptsx+1):
                file.write(str(self.Rx[j,i]) + ' ')
            file.write('\n')
        file.write("\n")
        
        file.write("Thermal resistance y" + "\n")
        for j in range(0,self.Nptsy+1):
            for i in range(0,self.Nptsx):
                file.write(str(self.Ry[j,i]) + ' ')
            file.write('\n')
        file.write("\n")
        file.write("\n")

        file.close()
#start of the executed script

simu=Visu()
simu.init_domain()
simu.resistance()
#simu.write_temp()
#simu.write_pres()
#simu.plot_temp()
#simu.plot_pres()

simu.domain()

if simu.debug :
    simu.write_debug()
plt.show()





